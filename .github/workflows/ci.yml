# .github/workflows/ci.yml
name: CI
  
on:
  issues:
    types: [opened, edited, reopened]
  issue_comment:
    types: [created, edited]
  
jobs:  
  run-tests:  
    strategy:
      fail-fast: false  
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.10", "3.11"]  
    
    runs-on: ${{ matrix.os }}
    name: Python ${{ matrix.python-version }} on ${{ matrix.os }}

    steps:  
      - uses: actions/checkout@v3  
      - name: Set up Python ${{ matrix.python-version }}  
        uses: actions/setup-python@v4  
        with:  
          python-version: ${{ matrix.python-version }}  
      - name: Install dependencies  
        run: |  
          python -m pip install --upgrade pip  
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi  
          python -m pip install pytest coverage
      - name: Test with pytest  
        run: |  
          coverage run -m pytest -v -s  
      - name: Generate Coverage Report  
        run: |  
          coverage report -m
  pylint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        sudo apt-get install python3-dev pkg-config
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi  
        python -m pip install pylint
    - name: Analysing the code with pylint
      run: |
        pylint --disable=R,C $(git ls-files 'leap/*.py') > pylint-report.txt
        score=$(tail -n 2 pylint_output.txt | head -n 1 | awk '{print $7}')
        echo "::set-output name=score::$score"
    - name: Post pylint report
      if: github.event.issue != null
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const data = fs.readFileSync('pylint-report.txt', 'utf8');
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: data
          });
