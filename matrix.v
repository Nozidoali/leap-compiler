//------------------------------------------------------------------------------
// Generated by LeaP compiler
// Author: Hanyu Wang
// Date: 2024-08-03 07:38:44
//------------------------------------------------------------------------------
`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
`define MEMORY_CONTROLLER_TAG_SIZE 9
`timescale 1 ns / 1 ns

module matrix
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	memory_controller_waitrequest,
	start,
	finish,
	arg_in_a,
	arg_in_b,
	arg_out_c,
	main_0_in_a_write_enable_a,
	main_0_in_a_in_a,
	main_0_in_a_byteena_a,
	main_0_in_a_enable_a,
	main_0_in_a_address_a,
	main_0_in_a_out_a,
	main_0_in_a_write_enable_b,
	main_0_in_a_in_b,
	main_0_in_a_byteena_b,
	main_0_in_a_enable_b,
	main_0_in_a_address_b,
	main_0_in_a_out_b,
	main_0_in_b_write_enable_a,
	main_0_in_b_in_a,
	main_0_in_b_byteena_a,
	main_0_in_b_enable_a,
	main_0_in_b_address_a,
	main_0_in_b_out_a,
	main_0_in_b_write_enable_b,
	main_0_in_b_in_b,
	main_0_in_b_byteena_b,
	main_0_in_b_enable_b,
	main_0_in_b_address_b,
	main_0_in_b_out_b,
	main_0_out_c_write_enable_a,
	main_0_out_c_in_a,
	main_0_out_c_byteena_a,
	main_0_out_c_enable_a,
	main_0_out_c_address_a,
	main_0_out_c_out_a,
	main_0_out_c_write_enable_b,
	main_0_out_c_in_b,
	main_0_out_c_byteena_b,
	main_0_out_c_enable_b,
	main_0_out_c_address_b,
	main_0_out_c_out_b
);

parameter [3:0] l_0 = 4'd0;
parameter [3:0] l_F_matrix_BB__1_1 = 4'd1;
parameter [3:0] l_F_matrix_BB_preheaderpreheader_2 = 4'd2;
parameter [3:0] l_F_matrix_BB_preheaderpreheader_3 = 4'd3;
parameter [3:0] l_F_matrix_BB_preheader_4 = 4'd4;
parameter [3:0] l_F_matrix_BB_preheader_5 = 4'd5;
parameter [3:0] l_F_matrix_BB_preheader_6 = 4'd6;
parameter [3:0] l_F_matrix_BB_preheader_7 = 4'd7;
parameter [3:0] l_F_matrix_BB__12_8 = 4'd8;
parameter [3:0] l_F_matrix_BB__12_9 = 4'd9;
parameter [3:0] l_F_matrix_BB__14_10 = 4'd10;
parameter [3:0] l_F_matrix_BB__14_11 = 4'd11;
parameter [3:0] l_F_matrix_BB__16_12 = 4'd12;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  memory_controller_waitrequest;
input  start;
output reg  finish;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_in_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_in_b;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_out_c;
output  main_0_in_a_write_enable_a;
output [31:0] main_0_in_a_in_a;
output  main_0_in_a_byteena_a;
output reg  main_0_in_a_enable_a;
output reg [9:0] main_0_in_a_address_a;
input [31:0] main_0_in_a_out_a;
output  main_0_in_a_write_enable_b;
output [31:0] main_0_in_a_in_b;
output  main_0_in_a_byteena_b;
output  main_0_in_a_enable_b;
output [9:0] main_0_in_a_address_b;
input [31:0] main_0_in_a_out_b;
output  main_0_in_b_write_enable_a;
output [31:0] main_0_in_b_in_a;
output  main_0_in_b_byteena_a;
output reg  main_0_in_b_enable_a;
output reg [9:0] main_0_in_b_address_a;
input [31:0] main_0_in_b_out_a;
output  main_0_in_b_write_enable_b;
output [31:0] main_0_in_b_in_b;
output  main_0_in_b_byteena_b;
output  main_0_in_b_enable_b;
output [9:0] main_0_in_b_address_b;
input [31:0] main_0_in_b_out_b;
output reg  main_0_out_c_write_enable_a;
output reg [31:0] main_0_out_c_in_a;
output  main_0_out_c_byteena_a;
output reg  main_0_out_c_enable_a;
output reg [9:0] main_0_out_c_address_a;
input [31:0] main_0_out_c_out_a;
output  main_0_out_c_write_enable_b;
output [31:0] main_0_out_c_in_b;
output  main_0_out_c_byteena_b;
output  main_0_out_c_enable_b;
output [9:0] main_0_out_c_address_b;
input [31:0] main_0_out_c_out_b;

reg [3:0] cur_state;
reg [3:0] next_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_in_a_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_in_b_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_out_c_reg;
reg  fsm_stall;
reg [5:0] matrix_1_i04;
reg [5:0] matrix_1_i04_reg;
reg [11:0] matrix_1_2;
reg [11:0] matrix_1_2_reg;
reg [31:0] matrix_preheaderpreheader_j03;
reg [31:0] matrix_preheaderpreheader_j03_reg;
reg [31:0] matrix_preheaderpreheader_3;
reg [31:0] matrix_preheaderpreheader_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] matrix_preheaderpreheader_scevgep4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] matrix_preheaderpreheader_scevgep4_reg;
reg [31:0] matrix_preheader_sum_mult02;
reg [31:0] matrix_preheader_sum_mult02_reg;
reg [31:0] matrix_preheader_k01;
reg [31:0] matrix_preheader_k01_reg;
reg [31:0] matrix_preheader_4;
reg [31:0] matrix_preheader_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] matrix_preheader_scevgep2;
reg [31:0] matrix_preheader_5;
reg [31:0] matrix_preheader_6;
reg [31:0] matrix_preheader_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] matrix_preheader_scevgep;
reg [31:0] matrix_preheader_7;
reg [31:0] matrix_preheader_8;
reg [31:0] matrix_preheader_9;
reg [31:0] matrix_preheader_10;
reg [31:0] matrix_preheader_11;
reg [31:0] matrix_preheader_11_reg;
reg  matrix_preheader_exitcond2;
reg  matrix_preheader_exitcond2_reg;
reg [31:0] matrix_12_lcssa;
reg [31:0] matrix_12_lcssa_reg;
reg [31:0] matrix_12_13;
reg [31:0] matrix_12_13_reg;
reg  matrix_12_exitcond6;
reg [6:0] matrix_14_15;
reg [6:0] matrix_14_15_reg;
reg  matrix_14_exitcond;
reg  l_mult_1_unsigned_32_32_1_0_clock;
reg  l_mult_1_unsigned_32_32_1_0_aclr;
reg  l_mult_1_unsigned_32_32_1_0_sum;
reg  l_mult_1_unsigned_32_32_1_0_clken;
reg [31:0] l_mult_1_unsigned_32_32_1_0_dataa;
reg [31:0] l_mult_1_unsigned_32_32_1_0_datab;
wire [63:0] l_mult_1_unsigned_32_32_1_0_result;
reg [63:0] l_mult_matrix_preheader_9_out_actual;
reg [31:0] l_mult_matrix_preheader_9_out;
reg  l_mult_matrix_preheader_9_en;

l_mult_1 l_mult_1_unsigned_32_32_1_0 (
	.clock (l_mult_1_unsigned_32_32_1_0_clock),
	.aclr (l_mult_1_unsigned_32_32_1_0_aclr),
	.sum (l_mult_1_unsigned_32_32_1_0_sum),
	.clken (l_mult_1_unsigned_32_32_1_0_clken),
	.dataa (l_mult_1_unsigned_32_32_1_0_dataa),
	.datab (l_mult_1_unsigned_32_32_1_0_datab),
	.result (l_mult_1_unsigned_32_32_1_0_result)
);

defparam
	l_mult_1_unsigned_32_32_1_0.widtha = 32,
	l_mult_1_unsigned_32_32_1_0.widthb = 32,
	l_mult_1_unsigned_32_32_1_0.widthp = 64,
	l_mult_1_unsigned_32_32_1_0.representation = "UNSIGNED";

always @(posedge clk) begin
if (reset == 1'b1) begin
	cur_state <= l_0;
end
else if (!fsm_stall) begin
	cur_state <= next_state;
end
end
always @(*) begin
	next_state = cur_state;
	next_state = cur_state;
if (((fsm_stall == 1'd0) && (start == 1'd1)) && (cur_state == l_0)) begin
	next_state = l_F_matrix_BB__1_1;
end
else if (cur_state == l_F_matrix_BB__12_8) begin
	next_state = l_F_matrix_BB__12_9;
end
else if (((fsm_stall == 1'd0) && (matrix_12_exitcond6 == 1'd1)) && (cur_state == l_F_matrix_BB__12_9)) begin
	next_state = l_F_matrix_BB__14_10;
end
else if (((fsm_stall == 1'd0) && (matrix_12_exitcond6 == 1'd0)) && (cur_state == l_F_matrix_BB__12_9)) begin
	next_state = l_F_matrix_BB_preheaderpreheader_2;
end
else if (cur_state == l_F_matrix_BB__14_10) begin
	next_state = l_F_matrix_BB__14_11;
end
else if (((fsm_stall == 1'd0) && (matrix_14_exitcond == 1'd1)) && (cur_state == l_F_matrix_BB__14_11)) begin
	next_state = l_F_matrix_BB__16_12;
end
else if (((fsm_stall == 1'd0) && (matrix_14_exitcond == 1'd0)) && (cur_state == l_F_matrix_BB__14_11)) begin
	next_state = l_F_matrix_BB__1_1;
end
else if (cur_state == l_F_matrix_BB__16_12) begin
	next_state = l_0;
end
else if (cur_state == l_F_matrix_BB__1_1) begin
	next_state = l_F_matrix_BB_preheaderpreheader_2;
end
else if (cur_state == l_F_matrix_BB_preheader_4) begin
	next_state = l_F_matrix_BB_preheader_5;
end
else if (cur_state == l_F_matrix_BB_preheader_5) begin
	next_state = l_F_matrix_BB_preheader_6;
end
else if (cur_state == l_F_matrix_BB_preheader_6) begin
	next_state = l_F_matrix_BB_preheader_7;
end
else if (((fsm_stall == 1'd0) && (matrix_preheader_exitcond2_reg == 1'd1)) && (cur_state == l_F_matrix_BB_preheader_7)) begin
	next_state = l_F_matrix_BB__12_8;
end
else if (((fsm_stall == 1'd0) && (matrix_preheader_exitcond2_reg == 1'd0)) && (cur_state == l_F_matrix_BB_preheader_7)) begin
	next_state = l_F_matrix_BB_preheader_4;
end
else if (cur_state == l_F_matrix_BB_preheaderpreheader_2) begin
	next_state = l_F_matrix_BB_preheaderpreheader_3;
end
else if (cur_state == l_F_matrix_BB_preheaderpreheader_3) begin
	next_state = l_F_matrix_BB_preheader_4;
end
end
always @(*) begin
	fsm_stall = 1'd0;
if (reset) begin
	fsm_stall = 1'd0;
end
else if (memory_controller_waitrequest) begin
	fsm_stall = 1'd1;
end
end
always @(*) begin
	matrix_12_exitcond6 = matrix_12_13_reg == 32'd32;
end
always @(*) begin
	matrix_14_exitcond = matrix_14_15_reg == 32'd32;
end
always @(posedge clk) begin
if (cur_state == l_F_matrix_BB_preheader_5) begin
	matrix_preheader_exitcond2_reg <= matrix_preheader_exitcond2;
end
end
always @(posedge clk) begin
if (start) begin
	arg_in_a_reg <= arg_in_a;
end
end
always @(posedge clk) begin
if (start) begin
	arg_in_b_reg <= arg_in_b;
end
end
always @(posedge clk) begin
if (start) begin
	arg_out_c_reg <= arg_out_c;
end
end
always @(*) begin
if (((cur_state == l_0) & (fsm_stall == 1'd0)) & (start == 1'd1)) begin
	matrix_1_i04 = 32'd0;
end
else begin
	matrix_1_i04 = matrix_14_15_reg;
end
end
always @(posedge clk) begin
if (cur_state == l_F_matrix_BB__14_10) begin
	matrix_14_15_reg <= matrix_14_15;
end
end
always @(posedge clk) begin
if (((cur_state == l_0) & (fsm_stall == 1'd0)) & (start == 1'd1)) begin
	matrix_1_i04_reg <= matrix_1_i04;
end
else if (((cur_state == l_F_matrix_BB__14_11) & (fsm_stall == 1'd0)) & (matrix_14_exitcond == 1'd0)) begin
	matrix_1_i04_reg <= matrix_1_i04;
end
end
always @(*) begin
	matrix_1_2 = ({6'd0, matrix_1_i04_reg})*32'd32;
end
always @(posedge clk) begin
if (cur_state == l_F_matrix_BB__1_1) begin
	matrix_1_2_reg <= matrix_1_2;
end
end
always @(*) begin
if ((cur_state == l_F_matrix_BB__1_1) & (fsm_stall == 1'd0)) begin
	matrix_preheaderpreheader_j03 = 32'd0;
end
else begin
	matrix_preheaderpreheader_j03 = matrix_12_13_reg;
end
end
always @(posedge clk) begin
if (cur_state == l_F_matrix_BB__12_8) begin
	matrix_12_13_reg <= matrix_12_13;
end
end
always @(posedge clk) begin
if ((cur_state == l_F_matrix_BB__1_1) & (fsm_stall == 1'd0)) begin
	matrix_preheaderpreheader_j03_reg <= matrix_preheaderpreheader_j03;
end
else if (((cur_state == l_F_matrix_BB__12_9) & (fsm_stall == 1'd0)) & (matrix_12_exitcond6 == 1'd0)) begin
	matrix_preheaderpreheader_j03_reg <= matrix_preheaderpreheader_j03;
end
end
always @(*) begin
	matrix_preheaderpreheader_3 = ({20'd0, matrix_1_2_reg}) + matrix_preheaderpreheader_j03_reg;
end
always @(posedge clk) begin
if (cur_state == l_F_matrix_BB_preheaderpreheader_2) begin
	matrix_preheaderpreheader_3_reg <= matrix_preheaderpreheader_3;
end
end
always @(*) begin
	matrix_preheaderpreheader_scevgep4 = arg_out_c_reg + (4 * matrix_preheaderpreheader_3_reg);
end
always @(posedge clk) begin
if (cur_state == l_F_matrix_BB_preheaderpreheader_3) begin
	matrix_preheaderpreheader_scevgep4_reg <= matrix_preheaderpreheader_scevgep4;
end
end
always @(*) begin
if ((cur_state == l_F_matrix_BB_preheaderpreheader_3) & (fsm_stall == 1'd0)) begin
	matrix_preheader_sum_mult02 = 32'd0;
end
else begin
	matrix_preheader_sum_mult02 = matrix_preheader_10;
end
end
always @(*) begin
	matrix_preheader_10 = matrix_preheader_sum_mult02_reg + matrix_preheader_9;
end
always @(posedge clk) begin
if ((cur_state == l_F_matrix_BB_preheaderpreheader_3) & (fsm_stall == 1'd0)) begin
	matrix_preheader_sum_mult02_reg <= matrix_preheader_sum_mult02;
end
else if (((cur_state == l_F_matrix_BB_preheader_7) & (fsm_stall == 1'd0)) & (matrix_preheader_exitcond2_reg == 1'd0)) begin
	matrix_preheader_sum_mult02_reg <= matrix_preheader_sum_mult02;
end
end
always @(*) begin
if ((cur_state == l_F_matrix_BB_preheaderpreheader_3) & (fsm_stall == 1'd0)) begin
	matrix_preheader_k01 = 32'd0;
end
else begin
	matrix_preheader_k01 = matrix_preheader_11_reg;
end
end
always @(posedge clk) begin
if (cur_state == l_F_matrix_BB_preheader_4) begin
	matrix_preheader_11_reg <= matrix_preheader_11;
end
end
always @(posedge clk) begin
if ((cur_state == l_F_matrix_BB_preheaderpreheader_3) & (fsm_stall == 1'd0)) begin
	matrix_preheader_k01_reg <= matrix_preheader_k01;
end
else if (((cur_state == l_F_matrix_BB_preheader_7) & (fsm_stall == 1'd0)) & (matrix_preheader_exitcond2_reg == 1'd0)) begin
	matrix_preheader_k01_reg <= matrix_preheader_k01;
end
end
always @(*) begin
	matrix_preheader_4 = ({20'd0, matrix_1_2_reg}) + matrix_preheader_k01_reg;
end
always @(posedge clk) begin
if (cur_state == l_F_matrix_BB_preheader_4) begin
	matrix_preheader_4_reg <= matrix_preheader_4;
end
end
always @(*) begin
	matrix_preheader_scevgep2 = arg_in_a_reg + (4 * matrix_preheader_4_reg);
end
always @(*) begin
	matrix_preheader_5 = matrix_preheader_k01_reg*32'd32;
end
always @(*) begin
	matrix_preheader_6 = matrix_preheaderpreheader_j03_reg + matrix_preheader_5;
end
always @(posedge clk) begin
if (cur_state == l_F_matrix_BB_preheader_4) begin
	matrix_preheader_6_reg <= matrix_preheader_6;
end
end
always @(*) begin
	matrix_preheader_scevgep = arg_in_b_reg + (4 * matrix_preheader_6_reg);
end
always @(*) begin
	matrix_preheader_7 = main_0_in_a_out_a;
end
always @(*) begin
	matrix_preheader_8 = main_0_in_b_out_a;
end
always @(*) begin
	l_mult_matrix_preheader_9_out = l_mult_matrix_preheader_9_out_actual;
end
always @(*) begin
	matrix_preheader_9 = l_mult_matrix_preheader_9_out;
end
always @(*) begin
	matrix_preheader_11 = matrix_preheader_k01_reg+32'd1;
end
always @(*) begin
	matrix_preheader_exitcond2 = matrix_preheader_11_reg == 32'd32;
end
always @(*) begin
	matrix_12_lcssa = matrix_preheader_10;
end
always @(posedge clk) begin
if (((cur_state == l_F_matrix_BB_preheader_7) & (fsm_stall == 1'd0)) & (matrix_preheader_exitcond2_reg == 1'd1)) begin
	matrix_12_lcssa_reg <= matrix_12_lcssa;
end
end
always @(*) begin
	matrix_12_13 = matrix_preheaderpreheader_j03_reg+32'd1;
end
always @(*) begin
	matrix_14_15 = ({1'd0, matrix_1_i04_reg})+32'd1;
end
always @(*) begin
	l_mult_1_unsigned_32_32_1_0_clock = clk;
end
always @(*) begin
	l_mult_1_unsigned_32_32_1_0_aclr = reset;
end
always @(*) begin
	l_mult_1_unsigned_32_32_1_0_sum = 1'd0;
if (reset) begin
	l_mult_1_unsigned_32_32_1_0_sum = 0;
end
end
always @(*) begin
	l_mult_matrix_preheader_9_en = ~fsm_stall;
end
always @(*) begin
	l_mult_1_unsigned_32_32_1_0_clken = l_mult_matrix_preheader_9_en;
end
always @(*) begin
	l_mult_1_unsigned_32_32_1_0_dataa = matrix_preheader_7;
end
always @(*) begin
	l_mult_1_unsigned_32_32_1_0_datab = matrix_preheader_8;
end
always @(*) begin
	l_mult_matrix_preheader_9_out_actual = l_mult_1_unsigned_32_32_1_0_result;
end
always @(posedge clk) begin
if (cur_state == l_0) begin
	finish <= 1'd0;
end
else if (cur_state == l_F_matrix_BB__16_12) begin
	finish <= fsm_stall == 1'd0;
end
end
assign main_0_in_a_write_enable_a = 1'd0;

assign main_0_in_a_in_a = 0;

assign main_0_in_a_byteena_a = 1'd1;

always @(*) begin
	main_0_in_a_enable_a = 1'd0;
if (cur_state == l_F_matrix_BB_preheader_5) begin
	main_0_in_a_enable_a = 1'd1;
end
end
always @(*) begin
	main_0_in_a_address_a = 10'd0;
if (cur_state == l_F_matrix_BB_preheader_5) begin
	main_0_in_a_address_a = matrix_preheader_scevgep2>>>3'd2;
end
end
assign main_0_in_a_write_enable_b = 1'd0;

assign main_0_in_a_in_b = 0;

assign main_0_in_a_byteena_b = 1'd1;

assign main_0_in_a_enable_b = 1'd0;

assign main_0_in_a_address_b = 10'd0;

assign main_0_in_b_write_enable_a = 1'd0;

assign main_0_in_b_in_a = 0;

assign main_0_in_b_byteena_a = 1'd1;

always @(*) begin
	main_0_in_b_enable_a = 1'd0;
if (cur_state == l_F_matrix_BB_preheader_5) begin
	main_0_in_b_enable_a = 1'd1;
end
end
always @(*) begin
	main_0_in_b_address_a = 10'd0;
if (cur_state == l_F_matrix_BB_preheader_5) begin
	main_0_in_b_address_a = matrix_preheader_scevgep>>>3'd2;
end
end
assign main_0_in_b_write_enable_b = 1'd0;

assign main_0_in_b_in_b = 0;

assign main_0_in_b_byteena_b = 1'd1;

assign main_0_in_b_enable_b = 1'd0;

assign main_0_in_b_address_b = 10'd0;

always @(*) begin
	main_0_out_c_write_enable_a = 1'd0;
if (cur_state == l_F_matrix_BB__12_8) begin
	main_0_out_c_write_enable_a = 1'd1;
end
end
always @(*) begin
	main_0_out_c_in_a = 0;
if (cur_state == l_F_matrix_BB__12_8) begin
	main_0_out_c_in_a = matrix_12_lcssa_reg;
end
end
assign main_0_out_c_byteena_a = 1'd1;

always @(*) begin
	main_0_out_c_enable_a = 1'd0;
if (cur_state == l_F_matrix_BB__12_8) begin
	main_0_out_c_enable_a = 1'd1;
end
end
always @(*) begin
	main_0_out_c_address_a = 10'd0;
if (cur_state == l_F_matrix_BB__12_8) begin
	main_0_out_c_address_a = matrix_preheaderpreheader_scevgep4_reg>>>3'd2;
end
end
assign main_0_out_c_write_enable_b = 1'd0;

assign main_0_out_c_in_b = 0;

assign main_0_out_c_byteena_b = 1'd1;

assign main_0_out_c_enable_b = 1'd0;

assign main_0_out_c_address_b = 10'd0;

endmodule
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	memory_controller_waitrequest,
	start,
	finish,
	return_val,
	matrix_start,
	matrix_finish,
	matrix_arg_in_a,
	matrix_arg_in_b,
	matrix_arg_out_c,
	main_0_in_a_write_enable_a,
	main_0_in_a_in_a,
	main_0_in_a_byteena_a,
	main_0_in_a_enable_a,
	main_0_in_a_address_a,
	main_0_in_a_out_a,
	main_0_in_a_write_enable_b,
	main_0_in_a_in_b,
	main_0_in_a_byteena_b,
	main_0_in_a_enable_b,
	main_0_in_a_address_b,
	main_0_in_a_out_b,
	main_0_in_b_write_enable_a,
	main_0_in_b_in_a,
	main_0_in_b_byteena_a,
	main_0_in_b_enable_a,
	main_0_in_b_address_a,
	main_0_in_b_out_a,
	main_0_in_b_write_enable_b,
	main_0_in_b_in_b,
	main_0_in_b_byteena_b,
	main_0_in_b_enable_b,
	main_0_in_b_address_b,
	main_0_in_b_out_b,
	main_0_out_c_write_enable_a,
	main_0_out_c_in_a,
	main_0_out_c_byteena_a,
	main_0_out_c_enable_a,
	main_0_out_c_address_a,
	main_0_out_c_out_a,
	main_0_out_c_write_enable_b,
	main_0_out_c_in_b,
	main_0_out_c_byteena_b,
	main_0_out_c_enable_b,
	main_0_out_c_address_b,
	main_0_out_c_out_b
);

parameter [3:0] l_0 = 4'd0;
parameter [3:0] l_F_main_BB__0_1 = 4'd1;
parameter [3:0] l_F_main_BB__1_2 = 4'd2;
parameter [3:0] l_F_main_BB__3_3 = 4'd3;
parameter [3:0] l_F_main_BB__3_4 = 4'd4;
parameter [3:0] l_F_main_BB__3_5 = 4'd5;
parameter [3:0] l_F_main_BB__6_6 = 4'd6;
parameter [3:0] l_F_main_BB__6_7 = 4'd7;
parameter [3:0] l_F_main_BB__8_8 = 4'd8;
parameter [3:0] l_F_main_BB__8_10 = 4'd10;
parameter [3:0] l_F_main_BB__12_11 = 4'd11;
parameter [3:0] l_F_main_BB__12_12 = 4'd12;
parameter [3:0] l_F_main_BB__16_13 = 4'd13;
parameter [3:0] l_function_call_9 = 4'd9;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  memory_controller_waitrequest;
input  start;
output reg  finish;
output reg [31:0] return_val;
output reg  matrix_start;
input  matrix_finish;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] matrix_arg_in_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] matrix_arg_in_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] matrix_arg_out_c;
output reg  main_0_in_a_write_enable_a;
output reg [31:0] main_0_in_a_in_a;
output  main_0_in_a_byteena_a;
output reg  main_0_in_a_enable_a;
output reg [9:0] main_0_in_a_address_a;
input [31:0] main_0_in_a_out_a;
output  main_0_in_a_write_enable_b;
output [31:0] main_0_in_a_in_b;
output  main_0_in_a_byteena_b;
output  main_0_in_a_enable_b;
output [9:0] main_0_in_a_address_b;
input [31:0] main_0_in_a_out_b;
output reg  main_0_in_b_write_enable_a;
output reg [31:0] main_0_in_b_in_a;
output  main_0_in_b_byteena_a;
output reg  main_0_in_b_enable_a;
output reg [9:0] main_0_in_b_address_a;
input [31:0] main_0_in_b_out_a;
output  main_0_in_b_write_enable_b;
output [31:0] main_0_in_b_in_b;
output  main_0_in_b_byteena_b;
output  main_0_in_b_enable_b;
output [9:0] main_0_in_b_address_b;
input [31:0] main_0_in_b_out_b;
output  main_0_out_c_write_enable_a;
output [31:0] main_0_out_c_in_a;
output  main_0_out_c_byteena_a;
output reg  main_0_out_c_enable_a;
output reg [9:0] main_0_out_c_address_a;
input [31:0] main_0_out_c_out_a;
output  main_0_out_c_write_enable_b;
output [31:0] main_0_out_c_in_b;
output  main_0_out_c_byteena_b;
output  main_0_out_c_enable_b;
output [9:0] main_0_out_c_address_b;
input [31:0] main_0_out_c_out_b;

reg [3:0] cur_state;
reg [3:0] next_state;
reg  fsm_stall;
reg [5:0] main_1_y03;
reg [5:0] main_1_y03_reg;
reg [11:0] main_1_2;
reg [11:0] main_1_2_reg;
reg [31:0] main_3_x02;
reg [31:0] main_3_x02_reg;
reg [31:0] main_3_4;
reg [31:0] main_3_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep2;
reg [31:0] main_3_5;
reg [31:0] main_3_5_reg;
reg  main_3_exitcond5;
reg  main_3_exitcond5_reg;
reg [6:0] main_6_7;
reg [6:0] main_6_7_reg;
reg  main_6_exitcond;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_8_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_8_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_8_11;
reg [10:0] main_12_i201;
reg [10:0] main_12_i201_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_12_scevgep;
reg [31:0] main_12_13;
reg [11:0] main_12_15;
reg [11:0] main_12_15_reg;
reg  main_12_exitcond2;

always @(*) begin
	fsm_stall = 1'd0;
if (reset) begin
	fsm_stall = 1'd0;
end
else if (memory_controller_waitrequest) begin
	fsm_stall = 1'd1;
end
end
always @(posedge clk) begin
if (!fsm_stall) begin
	finish <= 0;
end
else if (cur_state == l_0) begin
	finish <= 1'd0;
end
else if (cur_state == l_F_main_BB__16_13) begin
	finish <= fsm_stall == 1'd0;
end
end
always @(posedge clk) begin
if (reset == 1'b1) begin
	cur_state <= l_0;
end
else if (!fsm_stall) begin
	cur_state <= next_state;
end
end
always @(*) begin
	next_state = cur_state;
	next_state = cur_state;
if (((fsm_stall == 1'd0) && (start == 1'd1)) && (cur_state == l_0)) begin
	next_state = l_F_main_BB__0_1;
end
else if (cur_state == l_F_main_BB__0_1) begin
	next_state = l_F_main_BB__1_2;
end
else if (cur_state == l_F_main_BB__12_11) begin
	next_state = l_F_main_BB__12_12;
end
else if (((fsm_stall == 1'd0) && (main_12_exitcond2 == 1'd1)) && (cur_state == l_F_main_BB__12_12)) begin
	next_state = l_F_main_BB__16_13;
end
else if (((fsm_stall == 1'd0) && (main_12_exitcond2 == 1'd0)) && (cur_state == l_F_main_BB__12_12)) begin
	next_state = l_F_main_BB__12_11;
end
else if (cur_state == l_F_main_BB__16_13) begin
	next_state = l_0;
end
else if (cur_state == l_F_main_BB__1_2) begin
	next_state = l_F_main_BB__3_3;
end
else if (cur_state == l_F_main_BB__3_3) begin
	next_state = l_F_main_BB__3_4;
end
else if (cur_state == l_F_main_BB__3_4) begin
	next_state = l_F_main_BB__3_5;
end
else if (((fsm_stall == 1'd0) && (main_3_exitcond5_reg == 1'd1)) && (cur_state == l_F_main_BB__3_5)) begin
	next_state = l_F_main_BB__6_6;
end
else if (((fsm_stall == 1'd0) && (main_3_exitcond5_reg == 1'd0)) && (cur_state == l_F_main_BB__3_5)) begin
	next_state = l_F_main_BB__3_3;
end
else if (cur_state == l_F_main_BB__6_6) begin
	next_state = l_F_main_BB__6_7;
end
else if (((fsm_stall == 1'd0) && (main_6_exitcond == 1'd1)) && (cur_state == l_F_main_BB__6_7)) begin
	next_state = l_F_main_BB__8_8;
end
else if (((fsm_stall == 1'd0) && (main_6_exitcond == 1'd0)) && (cur_state == l_F_main_BB__6_7)) begin
	next_state = l_F_main_BB__1_2;
end
else if (cur_state == l_F_main_BB__8_10) begin
	next_state = l_F_main_BB__12_11;
end
else if (cur_state == l_F_main_BB__8_8) begin
	next_state = l_function_call_9;
end
else if (((fsm_stall == 1'd0) && (matrix_finish == 1'd1)) && (cur_state == l_function_call_9)) begin
	next_state = l_F_main_BB__8_10;
end
end
always @(*) begin
	main_12_exitcond2 = main_12_15_reg == 32'd1024;
end
always @(posedge clk) begin
if (cur_state == l_F_main_BB__3_4) begin
	main_3_exitcond5_reg <= main_3_exitcond5;
end
end
always @(*) begin
	main_6_exitcond = main_6_7_reg == 32'd32;
end
always @(*) begin
if ((cur_state == l_F_main_BB__0_1) & (fsm_stall == 1'd0)) begin
	main_1_y03 = 32'd0;
end
else begin
	main_1_y03 = main_6_7_reg;
end
end
always @(posedge clk) begin
if (cur_state == l_F_main_BB__6_6) begin
	main_6_7_reg <= main_6_7;
end
end
always @(posedge clk) begin
if ((cur_state == l_F_main_BB__0_1) & (fsm_stall == 1'd0)) begin
	main_1_y03_reg <= main_1_y03;
end
else if (((cur_state == l_F_main_BB__6_7) & (fsm_stall == 1'd0)) & (main_6_exitcond == 1'd0)) begin
	main_1_y03_reg <= main_1_y03;
end
end
always @(*) begin
	main_1_2 = ({6'd0, main_1_y03_reg})*32'd32;
end
always @(posedge clk) begin
if (cur_state == l_F_main_BB__1_2) begin
	main_1_2_reg <= main_1_2;
end
end
always @(*) begin
if ((cur_state == l_F_main_BB__1_2) & (fsm_stall == 1'd0)) begin
	main_3_x02 = 32'd0;
end
else begin
	main_3_x02 = main_3_5_reg;
end
end
always @(posedge clk) begin
if (cur_state == l_F_main_BB__3_3) begin
	main_3_5_reg <= main_3_5;
end
end
always @(posedge clk) begin
if ((cur_state == l_F_main_BB__1_2) & (fsm_stall == 1'd0)) begin
	main_3_x02_reg <= main_3_x02;
end
else if (((cur_state == l_F_main_BB__3_5) & (fsm_stall == 1'd0)) & (main_3_exitcond5_reg == 1'd0)) begin
	main_3_x02_reg <= main_3_x02;
end
end
always @(*) begin
	main_3_4 = ({20'd0, main_1_2_reg}) + main_3_x02_reg;
end
always @(posedge clk) begin
if (cur_state == l_F_main_BB__3_3) begin
	main_3_4_reg <= main_3_4;
end
end
always @(*) begin
	main_3_scevgep3 = 1'd0 + (4 * main_3_4_reg);
end
always @(*) begin
	main_3_scevgep2 = 1'd0 + (4 * main_3_4_reg);
end
always @(*) begin
	main_3_5 = main_3_x02_reg+32'd1;
end
always @(*) begin
	main_3_exitcond5 = main_3_5_reg == 32'd32;
end
always @(*) begin
	main_6_7 = ({1'd0, main_1_y03_reg})+32'd1;
end
always @(*) begin
if (reset) begin
	main_8_9 = 0;
end
else begin
	main_8_9 = 1'd0;
end
end
always @(*) begin
if (reset) begin
	main_8_10 = 0;
end
else begin
	main_8_10 = 1'd0;
end
end
always @(*) begin
if (reset) begin
	main_8_11 = 0;
end
else begin
	main_8_11 = 1'd0;
end
end
always @(*) begin
if ((cur_state == l_F_main_BB__8_10) & (fsm_stall == 1'd0)) begin
	main_12_i201 = 32'd0;
end
else begin
	main_12_i201 = main_12_15_reg;
end
end
always @(posedge clk) begin
if (cur_state == l_F_main_BB__12_11) begin
	main_12_15_reg <= main_12_15;
end
end
always @(posedge clk) begin
if ((cur_state == l_F_main_BB__8_10) & (fsm_stall == 1'd0)) begin
	main_12_i201_reg <= main_12_i201;
end
else if (((cur_state == l_F_main_BB__12_12) & (fsm_stall == 1'd0)) & (main_12_exitcond2 == 1'd0)) begin
	main_12_i201_reg <= main_12_i201;
end
end
always @(*) begin
	main_12_scevgep = 1'd0 + (4 * ({21'd0, main_12_i201_reg}));
end
always @(*) begin
	main_12_13 = main_0_out_c_out_a;
end
always @(*) begin
	main_12_15 = ({1'd0, main_12_i201_reg})+32'd1;
end
always @(posedge clk) begin
if (cur_state == l_0) begin
	return_val <= 0;
end
else if (cur_state == l_F_main_BB__16_13) begin
	return_val <= 32'd0;
end
end
always @(posedge clk) begin
	matrix_start <= 1'd0;
if (cur_state == l_F_main_BB__8_8) begin
	matrix_start <= 1'd1;
end
else if (cur_state == l_F_main_BB__8_10) begin
	matrix_start <= 1'd0;
end
end
always @(posedge clk) begin
	matrix_arg_in_a <= 0;
if (cur_state == l_F_main_BB__8_8) begin
	matrix_arg_in_a <= main_8_9;
end
end
always @(posedge clk) begin
	matrix_arg_in_b <= 0;
if (cur_state == l_F_main_BB__8_8) begin
	matrix_arg_in_b <= main_8_10;
end
end
always @(posedge clk) begin
	matrix_arg_out_c <= 0;
if (cur_state == l_F_main_BB__8_8) begin
	matrix_arg_out_c <= main_8_11;
end
end
always @(*) begin
	main_0_in_a_write_enable_a = 1'd0;
if (cur_state == l_F_main_BB__3_4) begin
	main_0_in_a_write_enable_a = 1'd1;
end
end
always @(*) begin
	main_0_in_a_in_a = 0;
if (cur_state == l_F_main_BB__3_4) begin
	main_0_in_a_in_a = 32'd1;
end
end
assign main_0_in_a_byteena_a = 1'd1;

always @(*) begin
	main_0_in_a_enable_a = 1'd0;
if (cur_state == l_F_main_BB__3_4) begin
	main_0_in_a_enable_a = 1'd1;
end
end
always @(*) begin
	main_0_in_a_address_a = 10'd0;
if (cur_state == l_F_main_BB__3_4) begin
	main_0_in_a_address_a = main_3_scevgep3>>>3'd2;
end
end
assign main_0_in_a_write_enable_b = 1'd0;

assign main_0_in_a_in_b = 0;

assign main_0_in_a_byteena_b = 1'd1;

assign main_0_in_a_enable_b = 1'd0;

assign main_0_in_a_address_b = 10'd0;

always @(*) begin
	main_0_in_b_write_enable_a = 1'd0;
if (cur_state == l_F_main_BB__3_4) begin
	main_0_in_b_write_enable_a = 1'd1;
end
end
always @(*) begin
	main_0_in_b_in_a = 0;
if (cur_state == l_F_main_BB__3_4) begin
	main_0_in_b_in_a = 32'd1;
end
end
assign main_0_in_b_byteena_a = 1'd1;

always @(*) begin
	main_0_in_b_enable_a = 1'd0;
if (cur_state == l_F_main_BB__3_4) begin
	main_0_in_b_enable_a = 1'd1;
end
end
always @(*) begin
	main_0_in_b_address_a = 10'd0;
if (cur_state == l_F_main_BB__3_4) begin
	main_0_in_b_address_a = main_3_scevgep2>>>3'd2;
end
end
assign main_0_in_b_write_enable_b = 1'd0;

assign main_0_in_b_in_b = 0;

assign main_0_in_b_byteena_b = 1'd1;

assign main_0_in_b_enable_b = 1'd0;

assign main_0_in_b_address_b = 10'd0;

assign main_0_out_c_write_enable_a = 1'd0;

assign main_0_out_c_in_a = 0;

assign main_0_out_c_byteena_a = 1'd1;

always @(*) begin
	main_0_out_c_enable_a = 1'd0;
if (cur_state == l_F_main_BB__12_11) begin
	main_0_out_c_enable_a = 1'd1;
end
end
always @(*) begin
	main_0_out_c_address_a = 10'd0;
if (cur_state == l_F_main_BB__12_11) begin
	main_0_out_c_address_a = main_12_scevgep>>>3'd2;
end
end
assign main_0_out_c_write_enable_b = 1'd0;

assign main_0_out_c_in_b = 0;

assign main_0_out_c_byteena_b = 1'd1;

assign main_0_out_c_enable_b = 1'd0;

assign main_0_out_c_address_b = 10'd0;

endmodule
module hex_digits
(
	x,
	hex_LEDs
);


input [3:0] x;
output [6:0] hex_LEDs;


assign hex_LEDs[0] = (~(x[3] & (~(x[3] & (~(x[3] & x[3])))))) | ((~(x[3] & (x[3] & (~(x[3] & (~x[3])))))) | ((x[3] & (x[3] & (~(x[3] & x[3])))) | (x[3] & (~(x[3] & (x[3] & x[3]))))));

assign hex_LEDs[0] = (~(x[3] & (x[3] & (~(x[3] & x[3]))))) | ((x[3] & (x[3] & x[3])) | ((x[3] & (x[3] & (~x[3]))) | (x[3] & (x[3] & (~x[3])))));

assign hex_LEDs[0] = (x[3] & (x[3] & (~x[3]))) | ((x[3] & (x[3] & x[3])) | (~(x[3] & (~(x[3] & (x[3] & (~x[3])))))));

assign hex_LEDs[0] = (~(x[3] & (~(x[3] & (~(x[3] & x[3])))))) | ((~(x[3] & (x[3] & (~(x[3] & (~x[3])))))) | ((x[3] & (x[3] & x[3])) | (x[3] & (~(x[3] & (x[3] & (~x[3])))))));

assign hex_LEDs[0] = (~(x[3] & x[3])) | ((~(x[3] & (x[3] & (~x[3])))) | (~(x[3] & (~(x[3] & x[3])))));

assign hex_LEDs[0] = (~(x[3] & (~(x[3] & x[3])))) | ((~(x[3] & (~(x[3] & x[3])))) | ((~(x[3] & (x[3] & x[3]))) | (x[3] & (x[3] & (~(x[3] & x[3]))))));

assign hex_LEDs[0] = (~(x[3] & (~(x[3] & (~x[3]))))) | ((x[3] & (x[3] & (~(x[3] & (~x[3]))))) | (~(x[3] & (x[3] & (x[3] & x[3])))));

endmodule
module top
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	memory_controller_waitrequest,
	start,
	finish,
	return_val
);


input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  memory_controller_waitrequest;
input  start;
output reg  finish;
output reg [31:0] return_val;

reg  main_inst_clk;
reg  main_inst_clk2x;
reg  main_inst_clk1x_follower;
reg  main_inst_reset;
reg  main_inst_memory_controller_waitrequest;
reg  main_inst_start;
wire  main_inst_finish;
wire [31:0] main_inst_return_val;
wire  main_inst_matrix_start;
reg  main_inst_matrix_finish;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_inst_matrix_arg_in_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_inst_matrix_arg_in_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_inst_matrix_arg_out_c;
wire  main_inst_main_0_in_a_write_enable_a;
wire [31:0] main_inst_main_0_in_a_in_a;
wire  main_inst_main_0_in_a_byteena_a;
wire  main_inst_main_0_in_a_enable_a;
wire [9:0] main_inst_main_0_in_a_address_a;
reg [31:0] main_inst_main_0_in_a_out_a;
wire  main_inst_main_0_in_a_write_enable_b;
wire [31:0] main_inst_main_0_in_a_in_b;
wire  main_inst_main_0_in_a_byteena_b;
wire  main_inst_main_0_in_a_enable_b;
wire [9:0] main_inst_main_0_in_a_address_b;
reg [31:0] main_inst_main_0_in_a_out_b;
wire  main_inst_main_0_in_b_write_enable_a;
wire [31:0] main_inst_main_0_in_b_in_a;
wire  main_inst_main_0_in_b_byteena_a;
wire  main_inst_main_0_in_b_enable_a;
wire [9:0] main_inst_main_0_in_b_address_a;
reg [31:0] main_inst_main_0_in_b_out_a;
wire  main_inst_main_0_in_b_write_enable_b;
wire [31:0] main_inst_main_0_in_b_in_b;
wire  main_inst_main_0_in_b_byteena_b;
wire  main_inst_main_0_in_b_enable_b;
wire [9:0] main_inst_main_0_in_b_address_b;
reg [31:0] main_inst_main_0_in_b_out_b;
wire  main_inst_main_0_out_c_write_enable_a;
wire [31:0] main_inst_main_0_out_c_in_a;
wire  main_inst_main_0_out_c_byteena_a;
wire  main_inst_main_0_out_c_enable_a;
wire [9:0] main_inst_main_0_out_c_address_a;
reg [31:0] main_inst_main_0_out_c_out_a;
wire  main_inst_main_0_out_c_write_enable_b;
wire [31:0] main_inst_main_0_out_c_in_b;
wire  main_inst_main_0_out_c_byteena_b;
wire  main_inst_main_0_out_c_enable_b;
wire [9:0] main_inst_main_0_out_c_address_b;
reg [31:0] main_inst_main_0_out_c_out_b;
reg  main_inst_finish_reg;
reg [31:0] main_inst_return_val_reg;
reg  main_0_in_a_inst_clk;
reg  main_0_in_a_inst_clken;
reg [9:0] main_0_in_a_inst_address_a;
reg  main_0_in_a_inst_wren_a;
reg [31:0] main_0_in_a_inst_data_a;
wire  main_0_in_a_inst_byteena_a;
wire [31:0] main_0_in_a_inst_q_a;
reg [9:0] main_0_in_a_inst_address_b;
reg  main_0_in_a_inst_wren_b;
reg [31:0] main_0_in_a_inst_data_b;
wire  main_0_in_a_inst_byteena_b;
wire [31:0] main_0_in_a_inst_q_b;
reg  main_0_in_b_inst_clk;
reg  main_0_in_b_inst_clken;
reg [9:0] main_0_in_b_inst_address_a;
reg  main_0_in_b_inst_wren_a;
reg [31:0] main_0_in_b_inst_data_a;
wire  main_0_in_b_inst_byteena_a;
wire [31:0] main_0_in_b_inst_q_a;
reg [9:0] main_0_in_b_inst_address_b;
reg  main_0_in_b_inst_wren_b;
reg [31:0] main_0_in_b_inst_data_b;
wire  main_0_in_b_inst_byteena_b;
wire [31:0] main_0_in_b_inst_q_b;
reg  main_0_out_c_inst_clk;
reg  main_0_out_c_inst_clken;
reg [9:0] main_0_out_c_inst_address_a;
reg  main_0_out_c_inst_wren_a;
reg [31:0] main_0_out_c_inst_data_a;
wire  main_0_out_c_inst_byteena_a;
wire [31:0] main_0_out_c_inst_q_a;
reg [9:0] main_0_out_c_inst_address_b;
reg  main_0_out_c_inst_wren_b;
reg [31:0] main_0_out_c_inst_data_b;
wire  main_0_out_c_inst_byteena_b;
wire [31:0] main_0_out_c_inst_q_b;
reg  matrix_inst_clk;
reg  matrix_inst_clk2x;
reg  matrix_inst_clk1x_follower;
reg  matrix_inst_reset;
reg  matrix_inst_memory_controller_waitrequest;
reg  matrix_inst_start;
wire  matrix_inst_finish;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] matrix_inst_arg_in_a;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] matrix_inst_arg_in_b;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] matrix_inst_arg_out_c;
wire  matrix_inst_main_0_in_a_write_enable_a;
wire [31:0] matrix_inst_main_0_in_a_in_a;
wire  matrix_inst_main_0_in_a_byteena_a;
wire  matrix_inst_main_0_in_a_enable_a;
wire [9:0] matrix_inst_main_0_in_a_address_a;
reg [31:0] matrix_inst_main_0_in_a_out_a;
wire  matrix_inst_main_0_in_a_write_enable_b;
wire [31:0] matrix_inst_main_0_in_a_in_b;
wire  matrix_inst_main_0_in_a_byteena_b;
wire  matrix_inst_main_0_in_a_enable_b;
wire [9:0] matrix_inst_main_0_in_a_address_b;
reg [31:0] matrix_inst_main_0_in_a_out_b;
wire  matrix_inst_main_0_in_b_write_enable_a;
wire [31:0] matrix_inst_main_0_in_b_in_a;
wire  matrix_inst_main_0_in_b_byteena_a;
wire  matrix_inst_main_0_in_b_enable_a;
wire [9:0] matrix_inst_main_0_in_b_address_a;
reg [31:0] matrix_inst_main_0_in_b_out_a;
wire  matrix_inst_main_0_in_b_write_enable_b;
wire [31:0] matrix_inst_main_0_in_b_in_b;
wire  matrix_inst_main_0_in_b_byteena_b;
wire  matrix_inst_main_0_in_b_enable_b;
wire [9:0] matrix_inst_main_0_in_b_address_b;
reg [31:0] matrix_inst_main_0_in_b_out_b;
wire  matrix_inst_main_0_out_c_write_enable_a;
wire [31:0] matrix_inst_main_0_out_c_in_a;
wire  matrix_inst_main_0_out_c_byteena_a;
wire  matrix_inst_main_0_out_c_enable_a;
wire [9:0] matrix_inst_main_0_out_c_address_a;
reg [31:0] matrix_inst_main_0_out_c_out_a;
wire  matrix_inst_main_0_out_c_write_enable_b;
wire [31:0] matrix_inst_main_0_out_c_in_b;
wire  matrix_inst_main_0_out_c_byteena_b;
wire  matrix_inst_main_0_out_c_enable_b;
wire [9:0] matrix_inst_main_0_out_c_address_b;
reg [31:0] matrix_inst_main_0_out_c_out_b;
reg  matrix_inst_finish_reg;

main main_inst (
	.clk (main_inst_clk),
	.clk2x (main_inst_clk2x),
	.clk1x_follower (main_inst_clk1x_follower),
	.reset (main_inst_reset),
	.memory_controller_waitrequest (main_inst_memory_controller_waitrequest),
	.start (main_inst_start),
	.finish (main_inst_finish),
	.return_val (main_inst_return_val),
	.matrix_start (main_inst_matrix_start),
	.matrix_finish (main_inst_matrix_finish),
	.matrix_arg_in_a (main_inst_matrix_arg_in_a),
	.matrix_arg_in_b (main_inst_matrix_arg_in_b),
	.matrix_arg_out_c (main_inst_matrix_arg_out_c),
	.main_0_in_a_write_enable_a (main_inst_main_0_in_a_write_enable_a),
	.main_0_in_a_in_a (main_inst_main_0_in_a_in_a),
	.main_0_in_a_byteena_a (main_inst_main_0_in_a_byteena_a),
	.main_0_in_a_enable_a (main_inst_main_0_in_a_enable_a),
	.main_0_in_a_address_a (main_inst_main_0_in_a_address_a),
	.main_0_in_a_out_a (main_inst_main_0_in_a_out_a),
	.main_0_in_a_write_enable_b (main_inst_main_0_in_a_write_enable_b),
	.main_0_in_a_in_b (main_inst_main_0_in_a_in_b),
	.main_0_in_a_byteena_b (main_inst_main_0_in_a_byteena_b),
	.main_0_in_a_enable_b (main_inst_main_0_in_a_enable_b),
	.main_0_in_a_address_b (main_inst_main_0_in_a_address_b),
	.main_0_in_a_out_b (main_inst_main_0_in_a_out_b),
	.main_0_in_b_write_enable_a (main_inst_main_0_in_b_write_enable_a),
	.main_0_in_b_in_a (main_inst_main_0_in_b_in_a),
	.main_0_in_b_byteena_a (main_inst_main_0_in_b_byteena_a),
	.main_0_in_b_enable_a (main_inst_main_0_in_b_enable_a),
	.main_0_in_b_address_a (main_inst_main_0_in_b_address_a),
	.main_0_in_b_out_a (main_inst_main_0_in_b_out_a),
	.main_0_in_b_write_enable_b (main_inst_main_0_in_b_write_enable_b),
	.main_0_in_b_in_b (main_inst_main_0_in_b_in_b),
	.main_0_in_b_byteena_b (main_inst_main_0_in_b_byteena_b),
	.main_0_in_b_enable_b (main_inst_main_0_in_b_enable_b),
	.main_0_in_b_address_b (main_inst_main_0_in_b_address_b),
	.main_0_in_b_out_b (main_inst_main_0_in_b_out_b),
	.main_0_out_c_write_enable_a (main_inst_main_0_out_c_write_enable_a),
	.main_0_out_c_in_a (main_inst_main_0_out_c_in_a),
	.main_0_out_c_byteena_a (main_inst_main_0_out_c_byteena_a),
	.main_0_out_c_enable_a (main_inst_main_0_out_c_enable_a),
	.main_0_out_c_address_a (main_inst_main_0_out_c_address_a),
	.main_0_out_c_out_a (main_inst_main_0_out_c_out_a),
	.main_0_out_c_write_enable_b (main_inst_main_0_out_c_write_enable_b),
	.main_0_out_c_in_b (main_inst_main_0_out_c_in_b),
	.main_0_out_c_byteena_b (main_inst_main_0_out_c_byteena_b),
	.main_0_out_c_enable_b (main_inst_main_0_out_c_enable_b),
	.main_0_out_c_address_b (main_inst_main_0_out_c_address_b),
	.main_0_out_c_out_b (main_inst_main_0_out_c_out_b)
);
ram_dual_port main_0_in_a_inst (
	.clk (main_0_in_a_inst_clk),
	.clken (main_0_in_a_inst_clken),
	.address_a (main_0_in_a_inst_address_a),
	.wren_a (main_0_in_a_inst_wren_a),
	.data_a (main_0_in_a_inst_data_a),
	.byteena_a (main_0_in_a_inst_byteena_a),
	.q_a (main_0_in_a_inst_q_a),
	.address_b (main_0_in_a_inst_address_b),
	.wren_b (main_0_in_a_inst_wren_b),
	.data_b (main_0_in_a_inst_data_b),
	.byteena_b (main_0_in_a_inst_byteena_b),
	.q_b (main_0_in_a_inst_q_b)
);

defparam
	main_0_in_a_inst.width_a = 32,
	main_0_in_a_inst.width_b = 32,
	main_0_in_a_inst.widthad_a = 10,
	main_0_in_a_inst.widthad_b = 10,
	main_0_in_a_inst.width_be_a = 1,
	main_0_in_a_inst.width_be_b = 1,
	main_0_in_a_inst.numwords_a = 1024,
	main_0_in_a_inst.numwords_b = 1024,
	main_0_in_a_inst.latency = 1;

ram_dual_port main_0_in_b_inst (
	.clk (main_0_in_b_inst_clk),
	.clken (main_0_in_b_inst_clken),
	.address_a (main_0_in_b_inst_address_a),
	.wren_a (main_0_in_b_inst_wren_a),
	.data_a (main_0_in_b_inst_data_a),
	.byteena_a (main_0_in_b_inst_byteena_a),
	.q_a (main_0_in_b_inst_q_a),
	.address_b (main_0_in_b_inst_address_b),
	.wren_b (main_0_in_b_inst_wren_b),
	.data_b (main_0_in_b_inst_data_b),
	.byteena_b (main_0_in_b_inst_byteena_b),
	.q_b (main_0_in_b_inst_q_b)
);

defparam
	main_0_in_b_inst.width_a = 32,
	main_0_in_b_inst.width_b = 32,
	main_0_in_b_inst.widthad_a = 10,
	main_0_in_b_inst.widthad_b = 10,
	main_0_in_b_inst.width_be_a = 1,
	main_0_in_b_inst.width_be_b = 1,
	main_0_in_b_inst.numwords_a = 1024,
	main_0_in_b_inst.numwords_b = 1024,
	main_0_in_b_inst.latency = 1;

ram_dual_port main_0_out_c_inst (
	.clk (main_0_out_c_inst_clk),
	.clken (main_0_out_c_inst_clken),
	.address_a (main_0_out_c_inst_address_a),
	.wren_a (main_0_out_c_inst_wren_a),
	.data_a (main_0_out_c_inst_data_a),
	.byteena_a (main_0_out_c_inst_byteena_a),
	.q_a (main_0_out_c_inst_q_a),
	.address_b (main_0_out_c_inst_address_b),
	.wren_b (main_0_out_c_inst_wren_b),
	.data_b (main_0_out_c_inst_data_b),
	.byteena_b (main_0_out_c_inst_byteena_b),
	.q_b (main_0_out_c_inst_q_b)
);

defparam
	main_0_out_c_inst.width_a = 32,
	main_0_out_c_inst.width_b = 32,
	main_0_out_c_inst.widthad_a = 10,
	main_0_out_c_inst.widthad_b = 10,
	main_0_out_c_inst.width_be_a = 1,
	main_0_out_c_inst.width_be_b = 1,
	main_0_out_c_inst.numwords_a = 1024,
	main_0_out_c_inst.numwords_b = 1024,
	main_0_out_c_inst.latency = 1;

matrix matrix_inst (
	.clk (matrix_inst_clk),
	.clk2x (matrix_inst_clk2x),
	.clk1x_follower (matrix_inst_clk1x_follower),
	.reset (matrix_inst_reset),
	.memory_controller_waitrequest (matrix_inst_memory_controller_waitrequest),
	.start (matrix_inst_start),
	.finish (matrix_inst_finish),
	.arg_in_a (matrix_inst_arg_in_a),
	.arg_in_b (matrix_inst_arg_in_b),
	.arg_out_c (matrix_inst_arg_out_c),
	.main_0_in_a_write_enable_a (matrix_inst_main_0_in_a_write_enable_a),
	.main_0_in_a_in_a (matrix_inst_main_0_in_a_in_a),
	.main_0_in_a_byteena_a (matrix_inst_main_0_in_a_byteena_a),
	.main_0_in_a_enable_a (matrix_inst_main_0_in_a_enable_a),
	.main_0_in_a_address_a (matrix_inst_main_0_in_a_address_a),
	.main_0_in_a_out_a (matrix_inst_main_0_in_a_out_a),
	.main_0_in_a_write_enable_b (matrix_inst_main_0_in_a_write_enable_b),
	.main_0_in_a_in_b (matrix_inst_main_0_in_a_in_b),
	.main_0_in_a_byteena_b (matrix_inst_main_0_in_a_byteena_b),
	.main_0_in_a_enable_b (matrix_inst_main_0_in_a_enable_b),
	.main_0_in_a_address_b (matrix_inst_main_0_in_a_address_b),
	.main_0_in_a_out_b (matrix_inst_main_0_in_a_out_b),
	.main_0_in_b_write_enable_a (matrix_inst_main_0_in_b_write_enable_a),
	.main_0_in_b_in_a (matrix_inst_main_0_in_b_in_a),
	.main_0_in_b_byteena_a (matrix_inst_main_0_in_b_byteena_a),
	.main_0_in_b_enable_a (matrix_inst_main_0_in_b_enable_a),
	.main_0_in_b_address_a (matrix_inst_main_0_in_b_address_a),
	.main_0_in_b_out_a (matrix_inst_main_0_in_b_out_a),
	.main_0_in_b_write_enable_b (matrix_inst_main_0_in_b_write_enable_b),
	.main_0_in_b_in_b (matrix_inst_main_0_in_b_in_b),
	.main_0_in_b_byteena_b (matrix_inst_main_0_in_b_byteena_b),
	.main_0_in_b_enable_b (matrix_inst_main_0_in_b_enable_b),
	.main_0_in_b_address_b (matrix_inst_main_0_in_b_address_b),
	.main_0_in_b_out_b (matrix_inst_main_0_in_b_out_b),
	.main_0_out_c_write_enable_a (matrix_inst_main_0_out_c_write_enable_a),
	.main_0_out_c_in_a (matrix_inst_main_0_out_c_in_a),
	.main_0_out_c_byteena_a (matrix_inst_main_0_out_c_byteena_a),
	.main_0_out_c_enable_a (matrix_inst_main_0_out_c_enable_a),
	.main_0_out_c_address_a (matrix_inst_main_0_out_c_address_a),
	.main_0_out_c_out_a (matrix_inst_main_0_out_c_out_a),
	.main_0_out_c_write_enable_b (matrix_inst_main_0_out_c_write_enable_b),
	.main_0_out_c_in_b (matrix_inst_main_0_out_c_in_b),
	.main_0_out_c_byteena_b (matrix_inst_main_0_out_c_byteena_b),
	.main_0_out_c_enable_b (matrix_inst_main_0_out_c_enable_b),
	.main_0_out_c_address_b (matrix_inst_main_0_out_c_address_b),
	.main_0_out_c_out_b (matrix_inst_main_0_out_c_out_b)
);
always @(*) begin
	main_inst_clk = clk;
end
always @(*) begin
	main_inst_clk2x = clk2x;
end
always @(*) begin
	main_inst_clk1x_follower = clk1x_follower;
end
always @(*) begin
	main_inst_reset = reset;
end
always @(*) begin
	main_inst_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
	main_inst_start = start;
end
always @(*) begin
	matrix_inst_start = main_inst_matrix_start;
end
always @(posedge clk) begin
if (reset | matrix_inst_start) begin
	matrix_inst_finish_reg <= 1'd0;
end
else if (matrix_inst_finish) begin
	matrix_inst_finish_reg <= 1'd1;
end
end
always @(*) begin
	main_inst_matrix_finish = ~(matrix_inst_start & matrix_inst_finish_reg);
end
always @(*) begin
	main_inst_main_0_in_a_out_a = main_0_in_a_inst_q_a;
end
always @(*) begin
	main_inst_main_0_in_a_out_b = main_0_in_a_inst_q_b;
end
always @(*) begin
	main_inst_main_0_in_b_out_a = main_0_in_b_inst_q_a;
end
always @(*) begin
	main_inst_main_0_in_b_out_b = main_0_in_b_inst_q_b;
end
always @(*) begin
	main_inst_main_0_out_c_out_a = main_0_out_c_inst_q_a;
end
always @(*) begin
	main_inst_main_0_out_c_out_b = main_0_out_c_inst_q_b;
end
always @(posedge clk) begin
if (reset | main_inst_start) begin
	main_inst_finish_reg <= 1'd0;
end
else if (main_inst_finish) begin
	main_inst_finish_reg <= 1'd1;
end
end
always @(posedge clk) begin
if (reset | main_inst_start) begin
	main_inst_return_val_reg <= 0;
end
else if (main_inst_finish) begin
	main_inst_return_val_reg <= main_inst_return_val;
end
end
always @(*) begin
	main_0_in_a_inst_clk = clk;
end
always @(*) begin
	main_0_in_a_inst_clken = ~memory_controller_waitrequest;
end
always @(*) begin
	main_0_in_a_inst_address_a = main_inst_main_0_in_a_address_a | matrix_inst_main_0_in_a_address_a;
end
always @(*) begin
	main_0_in_a_inst_wren_a = main_inst_main_0_in_a_write_enable_a | matrix_inst_main_0_in_a_write_enable_a;
end
always @(*) begin
	main_0_in_a_inst_data_a = main_inst_main_0_in_a_in_a | matrix_inst_main_0_in_a_in_a;
end
always @(*) begin
	main_0_in_a_inst_address_b = main_inst_main_0_in_a_address_b | matrix_inst_main_0_in_a_address_b;
end
always @(*) begin
	main_0_in_a_inst_wren_b = main_inst_main_0_in_a_write_enable_b | matrix_inst_main_0_in_a_write_enable_b;
end
always @(*) begin
	main_0_in_a_inst_data_b = main_inst_main_0_in_a_in_b | matrix_inst_main_0_in_a_in_b;
end
always @(*) begin
	main_0_in_b_inst_clk = clk;
end
always @(*) begin
	main_0_in_b_inst_clken = ~memory_controller_waitrequest;
end
always @(*) begin
	main_0_in_b_inst_address_a = main_inst_main_0_in_b_address_a | matrix_inst_main_0_in_b_address_a;
end
always @(*) begin
	main_0_in_b_inst_wren_a = main_inst_main_0_in_b_write_enable_a | matrix_inst_main_0_in_b_write_enable_a;
end
always @(*) begin
	main_0_in_b_inst_data_a = main_inst_main_0_in_b_in_a | matrix_inst_main_0_in_b_in_a;
end
always @(*) begin
	main_0_in_b_inst_address_b = main_inst_main_0_in_b_address_b | matrix_inst_main_0_in_b_address_b;
end
always @(*) begin
	main_0_in_b_inst_wren_b = main_inst_main_0_in_b_write_enable_b | matrix_inst_main_0_in_b_write_enable_b;
end
always @(*) begin
	main_0_in_b_inst_data_b = main_inst_main_0_in_b_in_b | matrix_inst_main_0_in_b_in_b;
end
always @(*) begin
	main_0_out_c_inst_clk = clk;
end
always @(*) begin
	main_0_out_c_inst_clken = ~memory_controller_waitrequest;
end
always @(*) begin
	main_0_out_c_inst_address_a = main_inst_main_0_out_c_address_a | matrix_inst_main_0_out_c_address_a;
end
always @(*) begin
	main_0_out_c_inst_wren_a = main_inst_main_0_out_c_write_enable_a | matrix_inst_main_0_out_c_write_enable_a;
end
always @(*) begin
	main_0_out_c_inst_data_a = main_inst_main_0_out_c_in_a | matrix_inst_main_0_out_c_in_a;
end
always @(*) begin
	main_0_out_c_inst_address_b = main_inst_main_0_out_c_address_b | matrix_inst_main_0_out_c_address_b;
end
always @(*) begin
	main_0_out_c_inst_wren_b = main_inst_main_0_out_c_write_enable_b | matrix_inst_main_0_out_c_write_enable_b;
end
always @(*) begin
	main_0_out_c_inst_data_b = main_inst_main_0_out_c_in_b | matrix_inst_main_0_out_c_in_b;
end
always @(*) begin
	matrix_inst_clk = clk;
end
always @(*) begin
	matrix_inst_clk2x = clk2x;
end
always @(*) begin
	matrix_inst_clk1x_follower = clk1x_follower;
end
always @(*) begin
	matrix_inst_reset = reset;
end
always @(*) begin
	matrix_inst_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
	matrix_inst_arg_in_a = main_inst_matrix_arg_in_a;
end
always @(*) begin
	matrix_inst_arg_in_b = main_inst_matrix_arg_in_b;
end
always @(*) begin
	matrix_inst_arg_out_c = main_inst_matrix_arg_out_c;
end
always @(*) begin
	matrix_inst_main_0_in_a_out_a = main_0_in_a_inst_q_a;
end
always @(*) begin
	matrix_inst_main_0_in_a_out_b = main_0_in_a_inst_q_b;
end
always @(*) begin
	matrix_inst_main_0_in_b_out_a = main_0_in_b_inst_q_a;
end
always @(*) begin
	matrix_inst_main_0_in_b_out_b = main_0_in_b_inst_q_b;
end
always @(*) begin
	matrix_inst_main_0_out_c_out_a = main_0_out_c_inst_q_a;
end
always @(*) begin
	matrix_inst_main_0_out_c_out_b = main_0_out_c_inst_q_b;
end
always @(posedge clk) begin
	finish <= main_inst_finish;
end
always @(posedge clk) begin
	return_val <= main_inst_return_val;
end
endmodule
